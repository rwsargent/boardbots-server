package quoridor

import (
	"testing"
	"boardbots/util"
	"github.com/stretchr/testify/assert"
)

func TestStraightShot(t *testing.T) {
	var StraightShot =
`........0........
.................
.................
.................
.................
.................
.................
.................
.................
.................
.................
.................
.................
.................
.................
.................
................`
	game, err := BuildQuoidorBoardFromString(StraightShot)
	if err != nil {
		t.Error(err.Error())
	}

	path := game.FindPath(util.Position{0, 8}, util.Position{16, -1})
	if path == nil {
		t.Error("Path is null")
	}
	expected := util.Position{2, 8}
	for _, pos := range path {
		if pos != expected {
			t.Error("Unexpected Position: %v ", pos)
		}
		expected.Row += 2
	}
}

func TestBarriersInFrontOfPawn(t *testing.T) {
	var ToTheSide =
`........0........
.----------------
.................
.................
.................
.................
.................
.................
.................
.................
.................
.................
.................
.................
.................
.................
.................`

	game, err := BuildQuoidorBoardFromString(ToTheSide)
	if err != nil {
		t.Error(err.Error())
	}

	path := game.FindPath(util.Position{0, 8}, util.Position{16, -1})
	assert.Len(t, path, 12, "path is the wrong length")
	assert.Equal(t, path[0], util.Position{0,6}, "starting Position of path is incorrect")
	assert.Equal(t,  util.Position{16,0}, path[len(path)-1], "end Position of path is incorrect")
}

func TestBarriersBlockGoal(t *testing.T) {
	var NoWayOut =
`........0........
-----------------
.................
.................
.................
.................
.................
.................
.................
.................
.................
.................
.................
.................
.................
.................
.................`

	game, err := BuildQuoidorBoardFromString(NoWayOut)
	if err != nil {
		t.Error(err.Error())
	}

	path := game.FindPath(util.Position{0, 8}, util.Position{16, -1})
	assert.Nil(t, path)
}

func TestSnakeBoard(t *testing.T) {
	var SnakeBoard =
`........0........
.----------------
.................
----------------.
.................
.----------------
.................
----------------.
.................
.----------------
.................
----------------.
.................
.----------------
.................
----------------.
.................`

	game, err := BuildQuoidorBoardFromString(SnakeBoard)
	if err != nil {
		t.Error(err.Error())
	}

	path := game.FindPath(util.Position{0,8}, util.Position{16, -1})
	assert.Len(t, path, 68)
	assert.Equal(t, util.Position{16, 16}, path[len(path)-1])
}

func TestGoesBackwardsToGoForwards(t *testing.T) {
	var GoBackwards =
`.................
.................
.......|0........
.......|..---.---
.......|.........
........---.---..
.......|.........
.......|..---.---
.......|.........
.................
.................
.................
.................
.................
.................
.................
.................`

	game, err := BuildQuoidorBoardFromString(GoBackwards)
	if err != nil {
		t.Error(err.Error())
	}

	path := game.FindPath(util.Position{2,8}, util.Position{16, -1})
	assert.Len(t, path, 10)
	assert.Equal(t, util.Position{16, 6}, path[len(path)-1])
}

func TestCanJumpPawnDiagonal(t *testing.T) {
	var GoBackwards =
`.......|.........
.......|.........
.......|0........
.......|..---.---
.......|1........
........---.---..
.......|.........
.......|..---.---
.......|.........
.................
.................
.................
.................
.................
.................
.................
.................`

	game, err := BuildQuoidorBoardFromString(GoBackwards)
	if err != nil {
		t.Error(err.Error())
	}

	path := game.FindPath(util.Position{2,8}, util.Position{16, -1})
	assert.Len(t, path, 14)
	assert.Equal(t, util.Position{16, 8}, path[len(path)-1])
}